# -*- coding: utf-8 -*-
"""dr zaki 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qqm5TqKJgTHygyyEovltL2qIw2gRLjxm
"""

!pip install streamlit faiss-cpu sentence-transformers langchain-community pyngrok pypdf groq langchain-groq

!pip install streamlit langchain langchain-groq pytesseract pillow

import os
os.environ["GROQ_API_KAY"]="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"

app_code = """
import os
import json
import pytesseract
from PIL import Image
import streamlit as st
from langchain.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.chains import RetrievalQA
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_groq import ChatGroq


# إعداد الصفحة
st.set_page_config(page_title="Doctor Zaki 🤓", layout="centered")

# تحميل وتخزين المخزون
INVENTORY_FILE = "inventory.json"

def load_inventory():
    if os.path.exists(INVENTORY_FILE):
        with open(INVENTORY_FILE, "r") as f:
            return json.load(f)
    else:
        return {
            "Paracetamol": {"quantity": 25, "status": "available"},
            "Amoxicillin": {"quantity": 0, "status": "out of stock"},
            "Ibuprofen": {"quantity": 10, "status": "available"},
            "Omeprazole": {"quantity": 2, "status": "low stock"},
        }

def save_inventory(data):
    with open(INVENTORY_FILE, "w") as f:
        json.dump(data, f, indent=2)

inventory = load_inventory()

# وظائف طبية
def check_inventory(drug_name):
    name = drug_name.strip().capitalize()
    if name in inventory:
        info = inventory[name]
        return f"{name} is {info['status']}. Quantity: {info['quantity']}"
    else:
        return f"{name} is not found in the inventory."

def load_medical_docs(path):
    loader = PyPDFLoader(path)
    docs = loader.load()
    splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    return splitter.split_documents(docs)

def embed_documents(docs):
    embed_model = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    return FAISS.from_documents(docs, embed_model)

def build_qa_system(faiss_index):
    llm = ChatGroq(
        api_key="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",
        model_name="llama3-8b-8192"
    )
    retriever = faiss_index.as_retriever(search_type="similarity", k=4)
    return RetrievalQA.from_chain_type(llm=llm, retriever=retriever)

def check_drugs_from_text(text, inventory):
    found = []
    words = [w.strip().capitalize() for w in text.split()]
    for word in words:
        if word in inventory:
            info = inventory[word]
            found.append(f"{word}: {info['status']} - Qty: {info['quantity']}")
    return found if found else ["No known drugs found."]

# تحليل CBC
def analyze_cbc_results(cbc_text):
    cbc_values = {
        "WBC": {"normal_range": "4.0-11.0", "low": "Possible infection", "high": "Possible leukemia"},
        "RBC": {"normal_range": "4.7-6.1", "low": "Possible anemia", "high": "Possible polycythemia"},
        "Hemoglobin": {"normal_range": "13.8-17.2", "low": "Possible anemia", "high": "Possible dehydration"},
        "Platelets": {"normal_range": "150-450", "low": "Risk of bleeding", "high": "Risk of clotting"},
    }
    analysis = []
    for key in cbc_values:
        if key in cbc_text:
            analysis.append(f"{key} found in report. Normal Range: {cbc_values[key]['normal_range']}")
    if not analysis:
        analysis.append("No CBC values recognized.")
    return analysis

# البرنامج الرئيسي
def main():

    # صفحة البداية
    if "start" not in st.session_state:
        st.session_state.start = False

    if not st.session_state.start:
        st.title("مرحبًا بك في Doctor Zaki 🤓")
        st.markdown('مساعد الصيدلي الاول في مصر والشرق الاوسط')
        if st.button("ابدأ", key="start_button"):
            st.session_state.start = True
        return


    # باقي البرنامج بعد الضغط على "ابدأ"
    st.title("Doctor Zaki 🤓")

    # تحميل السلسلة الذكية
    if "qa_chain" not in st.session_state:
        with st.spinner("Embedding medical documents..."):
            docs = load_medical_docs("/content/pharmacotherapy-handbook 9th(1)-merged.pdf")
            faiss_index = embed_documents(docs)
            st.session_state.qa_chain = build_qa_system(faiss_index)

    # الأسئلة الطبية
    query = st.text_input("Ask a medical question:")
    if query:
        with st.spinner("Generating answer..."):
            result = st.session_state.qa_chain.run(query)
            st.markdown(f"Answer: {result}")

    # استعلام عن دواء
    st.subheader("Check Drug Availability")
    drug = st.text_input("Enter drug name:")
    if st.button("Check Availability"):
        response = check_inventory(drug)
        st.success(response)

    # تعديل كميات
    st.subheader("Update Drug Quantity")
    drug_to_update = st.text_input("Drug name to update:")
    new_quantity = st.number_input("New quantity:", min_value=0, step=1)
    if st.button("Update Quantity"):
        drug_name = drug_to_update.strip().capitalize()
        if drug_name in inventory:
            inventory[drug_name]["quantity"] = int(new_quantity)
            inventory[drug_name]["status"] = (
                "available" if new_quantity > 5 else "low stock" if new_quantity > 0 else "out of stock"
            )
            save_inventory(inventory)
            st.success(f"{drug_name} updated to quantity {new_quantity}")
        else:
            st.error("Drug not found in inventory.")

    # قراءة صورة روشتة أو تحليل# قراءة صورة روشتة أو تحليل
    st.subheader("Upload Prescription or CBC Image")

    uploaded_image = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])
    if uploaded_image is not None:
        image = Image.open(uploaded_image)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        with st.spinner("Reading text from image..."):
            extracted_text = pytesseract.image_to_string(image)
            if extracted_text.strip():
                st.success(f"Extracted Text: {extracted_text}")

                # تحليل CBC إذا تم التعرف عليه
                if "CBC" in extracted_text or any(word in extracted_text for word in ["WBC", "RBC", "Hemoglobin", "Platelets"]):
                    analysis_results = analyze_cbc_results(extracted_text)
                    for result in analysis_results:
                        st.markdown(f"- {result}")
                else:
                    # ✅ الجزء الجديد: استخراج كل الأدوية من النص
                    detected_drugs = [drug for drug in inventory if drug.lower() in extracted_text.lower()]

                    if detected_drugs:
                        for drug in detected_drugs:
                            st.success(f"Detected Drug Name: {drug}")

                            # Check inventory
                            availability = check_inventory(drug)
                            st.info(availability)

                            # Fetch drug info
                            with st.spinner("Getting drug information..."):
                                info = st.session_state.qa_chain.run(f"What is {drug} used for?")
                                st.markdown(f"Medical Info: {info}")
                                st.markdown("---")
                    else:
                        st.warning("No known drugs found in image text.")
            else:
                st.warning("No recognizable text found. Try another image.")



if __name__ == "__main__":
    main()
"""

with open("shahd22ipynb.py", "w") as f:
    f.write(app_code)

from pyngrok import ngrok
!ngrok config add-authtoken  2vwyE8ssbFYQxwue6PiWfziYshx_6YnDDH8foJMH5fdZH2BgG
public_url = ngrok. connect (8501)
print(f" @ Streamlit app is live at: {public_url}")
!streamlit run shahd22ipynb.py &›/content/logs.txt &